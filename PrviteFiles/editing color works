bl_info = {
    "name": "CSV Scatter Plot",
    "blender": (3, 0, 0),
    "category": "Object",
}


import bpy
import csv
import os


def register_properties():
    bpy.types.Scene.csv_shape = bpy.props.EnumProperty(
        name="Shape",
        items=[
            ('SPHERE', "Sphere", ""),
            ('CUBE', "Cube", ""),
            ('CONE', "Cone", ""),
            ('CYLINDER', "Cylinder", ""),
        ],
        default='SPHERE'
    )

    bpy.types.Scene.csv_size = bpy.props.FloatProperty(name="Size", default=0.1)
    bpy.types.Scene.csv_color = bpy.props.FloatVectorProperty(name="Color", subtype='COLOR', default=(1.0, 0.0, 0.0), min=0.0, max=1.0)


def unregister_properties():
    del bpy.types.Scene.csv_shape
    del bpy.types.Scene.csv_size
    del bpy.types.Scene.csv_color


class ImportCSVOperator(bpy.types.Operator):
    bl_idname = "object.import_csv"
    bl_label = "Import CSV"
    bl_options = {'REGISTER', 'UNDO'}

    filepath: bpy.props.StringProperty(subtype="FILE_PATH")

    def execute(self, context):
        if not self.filepath:
            self.report({'ERROR'}, "Filepath not set")
            return {'CANCELLED'}

        if not os.path.exists(self.filepath):
            self.report({'ERROR'}, f"File not found: {self.filepath}")
            return {'CANCELLED'}

        # Pass context to import_csv method
        self.import_csv(context, self.filepath)
        return {'FINISHED'}

    def invoke(self, context, event):
        context.window_manager.fileselect_add(self)
        return {'RUNNING_MODAL'}

    def import_csv(self, context, filepath):
        # Clear existing objects
        bpy.ops.object.select_all(action='DESELECT')
        bpy.ops.object.select_all(action='SELECT')
        bpy.ops.object.delete(use_global=False)

        # Read CSV file
        with open(filepath, 'r') as file:
            reader = csv.DictReader(file)
            for row in reader:
                x = float(row['X'])
                y = float(row['Y'])
                z = float(row['Z'])
                label = row['Label']
                shape = context.scene.csv_shape
                size = context.scene.csv_size
                color = context.scene.csv_color

                if shape == 'SPHERE':
                    bpy.ops.mesh.primitive_uv_sphere_add(radius=size, location=(x, y, z))
                elif shape == 'CUBE':
                    bpy.ops.mesh.primitive_cube_add(size=size, location=(x, y, z))
                elif shape == 'CONE':
                    bpy.ops.mesh.primitive_cone_add(radius1=size, depth=size, location=(x, y, z))
                elif shape == 'CYLINDER':
                    bpy.ops.mesh.primitive_cylinder_add(radius=size, depth=size, location=(x, y, z))

                obj = bpy.context.object
                mat = bpy.data.materials.new(name="Material")
                mat.diffuse_color = (*color, 1)
                if obj.data.materials:
                    obj.data.materials[0] = mat
                else:
                    obj.data.materials.append(mat)


class CSVImporterPanel(bpy.types.Panel):
    bl_idname = "OBJECT_PT_csv_importer"
    bl_label = "CSV Importer"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Tools'

    def draw(self, context):
        layout = self.layout
        layout.operator("object.import_csv")
        layout.prop(context.scene, "csv_shape")
        layout.prop(context.scene, "csv_size")
        layout.prop(context.scene, "csv_color")

        # Add apply button
        layout.operator("object.apply_color", text="Apply Color")


class ApplyColorOperator(bpy.types.Operator):
    bl_idname = "object.apply_color"
    bl_label = "Apply Color"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        selected_objects = bpy.context.selected_objects
        color = context.scene.csv_color
        size = context.scene.csv_size
        for obj in selected_objects:
            if obj.type == 'MESH':
                # Apply size
                obj.scale = (size, size, size)

                # Apply color
                mat = bpy.data.materials.new(name="Material")
                mat.diffuse_color = (*color, 1)

                if obj.data.materials:
                    obj.data.materials[0] = mat
                else:
                    obj.data.materials.append(mat)

        return {'FINISHED'}



def menu_func_import(self, context):
    self.layout.operator(ImportCSVOperator.bl_idname, text="CSV Scatter Plot")


def register():
    register_properties()
    bpy.utils.register_class(ImportCSVOperator)
    bpy.utils.register_class(CSVImporterPanel)
    bpy.types.TOPBAR_MT_file_import.append(menu_func_import)
    bpy.utils.register_class(ApplyColorOperator)



def unregister():
    unregister_properties()
    bpy.utils.unregister_class(ImportCSVOperator)
    bpy.utils.unregister_class(CSVImporterPanel)
    bpy.utils.unregister_class(ApplyColorOperator)
    bpy.types.TOPBAR_MT_file_import.remove(menu_func_import)


if __name__ == "__main__":
    register()

